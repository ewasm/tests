createNonzero:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: ''
      nonce: '0x4'
      storage: {}
    # WASM source for compiled code, below:
    # a000000000000000000000000000000000000001:
    #   balance: '0'
    #   nonce: ''
    #   storage: {}
    #   code: |
    #     (module
    #       (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
    #       (memory 1)
    #       (export "memory" (memory 0))
    #       (export "main" (func $main))

    #       (func $main
    #         ;; locals
    #         (local $memPointerStorageKey5 i32)
    #         (local $memPointerStorageVal5 i32)

    #         ;; memory
    #         (set_local $memPointerStorageKey5 (i32.const 640))
    #         (set_local $memPointerStorageVal5 (i32.const 672))

    #         ;; init
    #         (i32.store (get_local $memPointerStorageKey5) (i32.const 4))
    #         (i32.store (get_local $memPointerStorageVal5) (i32.const 0xbeef))

    #         ;; store it
    #         (call $storageStore (get_local $memPointerStorageKey5) (get_local $memPointerStorageVal5))
    #       )
    #     )
    # WASM source for compiled code, below:
    # a000000000000000000000000000000000000000:
    #   balance: '0'
    #   nonce: ''
    #   storage: {}
    #   code: |
    #     (module
    #       (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
    #       (import "ethereum" "getCallValue" (func $getCallValue (param i32)))
    #       (import "ethereum" "return" (func $return (param i32 i32)))
    #       (memory 1)
    #       ;; simple contract that writes one value to storage, see source code above
    #       (data (i32.const 384) "\00\61\73\6d\01\00\00\00\01\09\02\60\02\7f\7f\00\60\00\00\02\19\01\08\65\74\68\65\72\65\75\6d\0c\73\74\6f\72\61\67\65\53\74\6f\72\65\00\00\03\02\01\01\05\03\01\00\01\07\11\02\06\6d\65\6d\6f\72\79\02\00\04\6d\61\69\6e\00\01\0a\26\01\24\01\02\7f\41\80\05\21\00\41\a0\05\21\01\20\00\41\04\36\02\00\20\01\41\ef\fd\02\36\02\00\20\00\20\01\10\00\0b")
    #       (export "memory" (memory 0))
    #       (export "main" (func $main))

    #       (func $main
    #         ;; locals
    #         (local $memPointerCallValue i32)
    #         (local $memPointerStorageKey4 i32)
    #         (local $memPointerReturnData i32)

    #         ;; memory layout
    #         (set_local $memPointerCallValue (i32.const 512))
    #         (set_local $memPointerStorageKey4 (i32.const 544))
    #         (set_local $memPointerReturnData (i32.const 384))

    #         ;; initialize
    #         (i32.store (get_local $memPointerStorageKey4) (i32.const 3))

    #         ;; get call value
    #         ;; result gets stored in pointer loc
    #         (call $getCallValue (get_local $memPointerCallValue))

    #         ;; write it to storage
    #         (call $storageStore (get_local $memPointerStorageKey4) (get_local $memPointerCallValue))

    #         ;; return something
    #         (call $return
    #           ;; pointer to read return data
    #           (get_local $memPointerReturnData)
    #           ;; length of return data (two bytes)
    #           (i32.const 114)
    #         )
    #       )
    #     )
    deadbeef00000000000000000000000000000000:
      balance: '100000000000'
      nonce: ''
      storage: {}
      code: |
        (module
          (import "ethereum" "create" (func $create (param i32 i32 i32 i32) (result i32)))
          (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
          (import "ethereum" "call" (func $call (param i64 i32 i32 i32 i32) (result i32)))
          (memory 1)

          ;; the inner contract to create
          ;; see WASM source for compiled code, above
          (data (i32.const 256) "\00\61\73\6d\01\00\00\00\01\0d\03\60\02\7f\7f\00\60\01\7f\00\60\00\00\02\43\03\08\65\74\68\65\72\65\75\6d\0c\73\74\6f\72\61\67\65\53\74\6f\72\65\00\00\08\65\74\68\65\72\65\75\6d\0c\67\65\74\43\61\6c\6c\56\61\6c\75\65\00\01\08\65\74\68\65\72\65\75\6d\06\72\65\74\75\72\6e\00\00\03\02\01\02\05\03\01\00\01\07\11\02\06\6d\65\6d\6f\72\79\02\00\04\6d\61\69\6e\00\03\0a\2d\01\2b\01\03\7f\41\80\04\21\00\41\a0\04\21\01\41\80\03\21\02\20\01\41\03\36\02\00\20\00\10\01\20\01\20\00\10\00\20\02\41\f2\00\10\02\0b\0b\79\01\00\41\80\03\0b\72\00\61\73\6d\01\00\00\00\01\09\02\60\02\7f\7f\00\60\00\00\02\19\01\08\65\74\68\65\72\65\75\6d\0c\73\74\6f\72\61\67\65\53\74\6f\72\65\00\00\03\02\01\01\05\03\01\00\01\07\11\02\06\6d\65\6d\6f\72\79\02\00\04\6d\61\69\6e\00\01\0a\26\01\24\01\02\7f\41\80\05\21\00\41\a0\05\21\01\20\00\41\04\36\02\00\20\01\41\ef\fd\02\36\02\00\20\00\20\01\10\00\0b")

          (export "memory" (memory 0))
          (export "main" (func $main))

          (func $main
            ;; locals
            (local $codeMemLoc i32)
            (local $codeLen i32)
            (local $memPointerStorageKey1 i32)
            (local $memPointerStorageKey2 i32)
            (local $memPointerCreateValue i32)
            (local $memPointerCreateResult i32)
            (local $memPointerZero i32)
            (local $memPointerStorageKey3 i32)

            ;; Location and length of code stored in (data) section above
            (set_local $codeMemLoc (i32.const 256))
            (set_local $codeLen (i32.const 290))

            ;; memory layout and pointers
            (set_local $memPointerStorageKey1 (i32.const 0))
            (set_local $memPointerStorageKey2 (i32.const 32))
            (set_local $memPointerCreateValue (i32.const 64))
            (set_local $memPointerCreateResult (i32.const 96))
            (set_local $memPointerZero (i32.const 128))
            (set_local $memPointerStorageKey3 (i32.const 160))

            ;; initialize
            (i32.store (get_local $memPointerStorageKey1) (i32.const 0))
            (i32.store (get_local $memPointerStorageKey2) (i32.const 1))
            (i32.store (get_local $memPointerStorageKey3) (i32.const 2))
            (i32.store (get_local $memPointerZero) (i32.const 0))
            ;; call create with value transfer 0x1234 = 4660
            (i32.store (get_local $memPointerCreateValue) (i32.const 0x1234))

            ;; call CREATE and store the return success/failure value
            (call $storageStore
              (get_local $memPointerStorageKey1)
              (call $create
                ;; value offset
                (get_local $memPointerCreateValue)
                ;; data offset
                (get_local $codeMemLoc)
                ;; data length
                (get_local $codeLen)
                ;; result offset (new contract address)
                (get_local $memPointerCreateResult)
              )
            )

            ;; store the result (new contract address)
            (call $storageStore
              (get_local $memPointerStorageKey2)
              (get_local $memPointerCreateResult)
            )

            ;; finally, call the newly-created contract and store the result
            (call $storageStore
              (get_local $memPointerStorageKey3)
              (call $call
                ;; gas limit
                (i64.const 200000)
                ;; addr offset
                (get_local $memPointerCreateResult)
                ;; val offset
                (get_local $memPointerZero)
                ;; data offset
                (get_local $memPointerZero)
                ;; data length
                (get_local $memPointerZero)
              )
            )
          )
        )
  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          balance: '99999853498'
        deadbeef00000000000000000000000000000000:
          storage: {
            # Expect CREATE to return success
            # $memPointerStorageKey1 = 0
            0: '0',
            # Expect CREATE result to be new contract address
            # $memPointerStorageKey2 = 1
            1: '0xf2048c36a5536fea3bc71d49ed59f2c65c546eea',
            # Result of call, 0 is success
            2: '0',
            # Nothing should be stored at this key
            3: '',
          }
        # Newly-created contract
        0xf2048c36a5536fea3bc71d49ed59f2c65c546eea:
          code: '0x0061736d0100000001090260027f7f0060000002190108657468657265756d0c73746f7261676553746f72650000030201010503010001071102066d656d6f72790200046d61696e00010a26012401027f418005210041a005210120004104360200200141effd023602002000200110000b'
          storage: {
            # Expect created contract to store its call value
            # $memPointerStorageKey4 = 3
            3: '0x1234',
            # Written by inner, called code
            4: '0xbeef',
          }
  transaction:
    data:
    - '0x'
    gasLimit:
    - '0x6acfc0'
    gasPrice: '0x01'
    nonce: '0x04'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    to: 'deadbeef00000000000000000000000000000000'
    value:
    - '0'
